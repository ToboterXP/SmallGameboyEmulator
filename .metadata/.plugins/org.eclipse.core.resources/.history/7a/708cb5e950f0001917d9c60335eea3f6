/*
 * BasicROMSection.cpp
 *
 *  Created on: 16.10.2019
 *      Author: Tobias
 */

#include <memory/BasicROMSection.h>

namespace memory {

BasicROMSection::BasicROMSection(string filename, uint16_t start, uint32_t length)  : MemorySection(0,1){
	ifstream file;
	file.open(filename,ios::in|ios::binary|ios::ate);
	streampos size = file.tellg();
	rom = new uint8_t[size];
	file.seekg(0,ios::beg);
	file.read((char *)rom,size);
	file.close();

	cartridgeType = rom[0x147];
	switch (cartridgeType) {
	case 1:
	case 2:
	case 3:
		romType = MBC1;
		break;
	default:
		romType = NONE;
		break;
	}

	bankOffset = 0x4000;
	ramOffset = 0;

	switch (rom[0x149]) {
	case 0:
		ram = new uint8_t[1];
		break;
	case 1:
		ram = new uint8_t[0x800];
		break;
	case 2:
		ram = new uint8_t[0x2000];
		break;
	case 3:
		ram = new uint8_t[0x8000];
		break;
	case 4:
		ram = new uint8_t[0x20000];
	}
}

BasicROMSection::~BasicROMSection(){
	delete this->rom;
	delete this->ram;
}

bool BasicROMSection::containsAddress(uint16_t addr) {
	return addr<0x8000 || (addr>0xc000 && addr<=0xa000);
}

bool BasicROMSection::writeAddress(uint16_t addr, uint8_t value) {
	if (containsAddress(addr)) {
		if (addr>0x8000) memory[addr-0xa000] = value;
		return true;
	}
	return false;
}
uint8_t BasicROMSection::readAddress(uint16_t addr) {
	if (addr>0x8000) return memory[addr-0xa000];
	if (addr<0x4000) return rom[addr];
	else return rom[bankOffset+addr-0x4000];
}

} /* namespace proc */
