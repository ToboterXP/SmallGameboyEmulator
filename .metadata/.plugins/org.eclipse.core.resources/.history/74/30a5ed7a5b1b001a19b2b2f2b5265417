/*
 * BasicROMSection.cpp
 *
 *  Created on: 16.10.2019
 *      Author: Tobias
 */

#include <memory/BasicROMSection.h>
#include <cstdio>

namespace memory {

BasicROMSection::BasicROMSection(string filename)  : MemorySection(0,2){
	romFilename = filename;
	ifstream file;
	file.open(filename,ios::in|ios::binary|ios::ate);
	if (!file.is_open()) {
		cout << "Error: File not found" << endl;
		exit(1);
	}
	file.seekg(0,file.end);
	streampos size = file.tellg();
	rom = new uint8_t[size];
	file.seekg(0,ios::beg);
	file.read((char *)rom,size);
	file.close();

	cartridgeType = rom[0x147];
	switch (cartridgeType) {
	case 1:
	case 2:
	case 3:
		romType = MBC1;
		break;
	case 0x12:
	case 0x13:
		romType = MBC3;
		break;
	default:
		romType = NONE;
		break;
	}

	bankOffset = 0x4000;
	ramOffset = 0;
	romMode = 0;

	switch (rom[0x149]) {
	case 0:
		ram = new uint8_t[1];
		ramSizeID = 0;
		ramSize = 0;
		break;
	case 1:
		ram = new uint8_t[0x800];
		ramSizeID = 1;
		ramSize = 0x800;
		break;
	case 2:
		ram = new uint8_t[0x2000];
		ramSizeID = 2;
		ramSize = 0x2000;
		break;
	case 3:
		ram = new uint8_t[0x8000];
		ramSizeID = 3;
		ramSize = 0x8000;
		break;
	case 4:
		ram = new uint8_t[0x20000];
		ramSizeID = 4;
		ramSize = 0x20000;
		break;
	}

	file.open(romFilename.substr(0,romFilename.find_last_of('.'))+".srm",ios::in|ios::binary);
	if (file.is_open()) {
		cout << "loading sram" << endl;
		file.read((char *)ram,ramSize);
		for (int i=0x2598;i<0x2698;i++) {
			for (int j=0;j<16;j++,i++) {
				printf("%x ",(int)(ram[i]));
			}
			printf("\n");
		}
	}

	file.close();
}

BasicROMSection::~BasicROMSection(){
	delete this->rom;
	delete this->ram;
}

bool BasicROMSection::containsAddress(uint16_t addr) {
	return addr<0x8000 || (addr<0xc000 && addr>=0xa000);
}

bool BasicROMSection::writeAddress(uint16_t addr, uint8_t value) {
	if (addr==0xb523) cout << (int)value<<endl;
	if (containsAddress(addr)) {
		if (addr>0x8000 && !sramLock) {
			if (addr>=0xa598&&addr<=0xb523)SDL_Log("sram write%x %x %x\n", (int)addr,(int)(addr-0xa000+ramOffset),(int)value);
			ram[addr-0xa000+ramOffset] = value;
		}

		switch(romType) {
		case MBC1:
			if (addr<0x4000) {
				if (value==0) value = 1;
				bankOffset &= 0x1fff;
				bankOffset |= ((uint64_t)value&0x1f)<<14;
				romBank = (uint64_t)value&0x1f;
			}
			else if (addr<0x6000) {
				if (romMode==1) {
					bankOffset &= 0x7ffff;
					bankOffset |= ((uint64_t)value&3)<<20;
					romBank = ((uint64_t)value&3)<<6;
				} else {
					ramOffset &= 0x1fff;
					ramOffset |= ((uint64_t)value&3)<<13;
				}
			}
			else if(addr<0x8000) {
				romMode = value&1;
			}
			break;

		case MBC3:
			if (addr<0x2000) {
				if (value==0x0a) sramLock = false;
				else {
					sramLock = true;
					saveSRAM();
				}
			}
			if (addr>=0x2000 && addr<0x4000) {
				if (value==0) value = 1;
				changed = true;
				bankOffset = (value&0x7f)<<14;
				romBank = value;
			}
			else if (addr<0x6000) {
				ramOffset &= 0x1fff;
				ramOffset |= ((uint64_t)value&3)<<13;
				SDL_Log("ram off %x %x\n",value,(int)ramOffset);
			}
			break;
		default:
			break;
		}
		return true;
	}
	return false;
}
uint8_t BasicROMSection::readAddress(uint16_t addr) {
	if (addr>=0xa000) return ram[addr-0xa000+ramOffset];
	if (addr<0x4000) {
		return rom[addr];
	}
	else return rom[bankOffset+addr-0x4000];
}

void BasicROMSection::saveSRAM() {
	cout << "Saving..." << endl;
	for (int i=0x2598;i<0x2698;i++) {
		for (int j=0;j<16;j++,i++) {
			printf("%x ",(int)(ram[i]));
		}
		printf("\n");
	}
	ofstream myfile;
	myfile.open (romFilename.substr(0,romFilename.find_last_of('.'))+".srm", ios::binary|ios::out);
	myfile.write((char*)ram,(size_t)ramSize);

	myfile.close();
}

} /* namespace proc */
